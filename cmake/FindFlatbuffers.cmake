#
# Locate and configure the Google Protocol Buffers library
#
# Adds the following targets:
#
#  flatbuffers::libflatbuffers - flatbuffers library
#  flatbuffers::flatc - flatc executable
#

#
# Generates C++ sources and bfbs schema file from the .fbs files
#
# flatc_generate_cpp (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
#  SRCS - variable to define with autogenerated source files
#  HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .fbs files
#
function(FLATC_GENERATE_CPP HDRS BFBS DEST)
  if(NOT ARGN)
    message(SEND_ERROR "Error: FLATC_GENERATE_CPP() called without any fbs files")
    return()
  endif()

  if(FLATC_GENERATE_CPP_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      list(FIND _flatbuffers_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _flatbuffers_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  else()
    set(_flatbuffers_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  if(DEFINED FLATBUFFERS_IMPORT_DIRS)
    foreach(DIR ${FLATBUFFERS_IMPORT_DIRS})
      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      list(FIND _flatbuffers_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _flatbuffers_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  endif()


  set(${HDRS})
  set(${BFBS})
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)

    list(APPEND ${HDRS} "${DEST}/${FIL_WE}_generated.h")
    list(APPEND ${BFBS} "${DEST}/${FIL_WE}.bfbs")

    add_custom_command(
      OUTPUT "${DEST}/${FIL_WE}_generated.h"
             "${DEST}/${FIL_WE}.bfbs"
      COMMAND flatbuffers::flatc
      ARGS -o ${DEST} --cpp -b --schema --reflect-names ${ABS_FIL} 
      DEPENDS ${ABS_FIL} flatbuffers::flatc
      COMMENT "Running C++ flatbuffers compiler on ${FIL}"
      VERBATIM )
  endforeach()

  set_source_files_properties(${${HDRS}} ${${BFBS}} PROPERTIES GENERATED TRUE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
  set(${BFBS} ${${BFBS}} PARENT_SCOPE)
endfunction()

# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc
# for each directory where a proto file is referenced.
if(NOT DEFINED FLATBUFFERS_GENERATE_CPP_APPEND_PATH)
  set(FLATBUFFERS_GENERATE_CPP_APPEND_PATH TRUE)
endif()

# Find the include directory
find_path(FLATBUFFERS_INCLUDE_DIR flatbuffers/flatbuffers.h)
mark_as_advanced(FLATBUFFERS_INCLUDE_DIR)

# The flatbuffers library
find_library(FLATBUFFERS_LIBRARY NAMES flatbuffers)
mark_as_advanced(FLATBUFFERS_LIBRARY)
add_library(flatbuffers::libflatbuffers UNKNOWN IMPORTED)
set_target_properties(flatbuffers::libflatbuffers PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ${FLATBUFFERS_INCLUDE_DIR}
    INTERFACE_LINK_LIBRARIES pthread
    IMPORTED_LOCATION ${FLATBUFFERS_LIBRARY}
)

# Find the flatc Executable
find_program(FLATBUFFERS_FLATC_EXECUTABLE NAMES flatc)
mark_as_advanced(FLATBUFFERS_FLATC_EXECUTABLE)
add_executable(flatbuffers::flatc IMPORTED)
set_target_properties(flatbuffers::flatc PROPERTIES
    IMPORTED_LOCATION ${FLATBUFFERS_FLATC_EXECUTABLE}
)

include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Flatbuffers DEFAULT_MSG
    FLATBUFFERS_LIBRARY FLATBUFFERS_INCLUDE_DIR FLATBUFFERS_FLATC_EXECUTABLE)
